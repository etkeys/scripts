#!/usr/bin/env bash

set -e

APP_NAME="dmenu-style"
LAUNCHER="dmenu_run"
PROMPTER="dmenu"
XRESBASE="dmenu"
XRESBASECOLOR="$XRESBASE.color"

declare -a CHOICES
CRITICAL=0
OPTS_DONE=0
PROMPT_TEXT=''
VERBOSE=0
YESNO=0

function write_debug() {
    if [ $VERBOSE -gt 0 ]; then
        echo "[DEBUG] $@"
    fi
}

function join_by() {
    local IFS="$1"
    shift;
    echo "$*"
}

function usage() {
    echo
    echo "Usage"
    echo "  ${APP_NAME} [options] -- [CMD]"
    echo
    echo "Options:"
    echo "  --choose NUM item1 item2 ... itemN"
    echo "                      : List of values to select from"
    echo "                        NUM is the count of items to extract"
    echo "  --critical          : Use styling that indicates high importance"
    echo "  --prompt <msg>      : What to ask the user"
    echo "  --verbose           : Print additional output"
    echo "  --yesno             : Selection list is just \"No\" and \"Yes\""
    echo
    exit 1
}

CRITBG=$(xgetres $XRESBASECOLOR.critical_background || echo '#ffff00')
CRITFG=$(xgetres $XRESBASECOLOR.critical_text || echo '#000000')
CRITSBG=$(xgetres $XRESBASECOLOR.critical_selected || echo '#ff0000')
CRITSFG=$(xgetres $XRESBASECOLOR.critical_selected_text || echo '#ffffff')
FONT="$(xgetres $XRESBASE.font || echo 'pango:Ubuntu Mono 10')"
STDBG=$(xgetres $XRESBASECOLOR.standard_background || echo '#000000')
STDFG=$(xgetres $XRESBASECOLOR.standard_text || echo '#ffffff')
STDSBG=$(xgetres $XRESBASECOLOR.standard_selected || echo '#0000ff')
STDSFG=$(xgetres $XRESBASECOLOR.standard_selected_text || echo '#ffffff')

while [ $# -gt 0 ] && [ $OPTS_DONE -lt 1 ]; do
    case "${1}" in
        -critical|--critical)
            CRITICAL=1
            shift;;
        -yesno|--yesno)
            YESNO=1
            shift;;
        -prompt|--prompt)
            PROMPT_TEXT="${2}"
            if [ -z "${PROMPT_TEXT}" ]; then
                EMSG="ERROR! No prompt text give for --prompt."
                echo "$EMSG"
                notify-send --urgency critical --expire-time 3000 "$APP_NAME" "$EMSG"
                exit 1
            fi
            shift; shift;;
        -choose|--choose)
            COUNT="${2}"
            write_debug "COUNT=$COUNT"
            case $COUNT in
                ''|*[!0-9]*)
                    EMSG="ERROR! Expected NUMBER after --choose."
                    echo "$EMSG"
                    notify-send --urgency critical --expire-time 3000 "$APP_NAME" "$EMSG"
                    usage
                    ;;
                *)
                    shift; shift
                for ((i = 0; i < $COUNT; i++)); do
                    write_debug "adding choice: ${1}"
                    CHOICES[i]="${1}"
                    shift
                done
            esac
            ;;
        -v|-verbose|--verbose)
            VERBOSE=$(($VERBOSE + 1))
            shift;;
        -h|--h|-help|--help)
            usage;;
        --)
            OPTS_DONE=1
            shift;;
        *)
            EMSG="ERROR! \"${1}\" is not a supported parameter."
            echo "$EMSG"
            notify-send --urgency critical --expire-time 3000 "$APP_NAME" "$EMSG"
            usage;;
    esac
done

write_debug "CRITBG=$CRITBG"
write_debug "CRITFG=$CRITFG"
write_debug "CRITSBG=$CRITSBG"
write_debug "CRITSFG=$CRITSFG"
write_debug "FONT=$FONT"
write_debug "STDBG=$STDBG"
write_debug "STDFG=$STDFG"
write_debug "STDSBG=$STDSBG"
write_debug "STDSFG=$STDSFG"

write_debug "CRITICAL=$CRITICAL"
write_debug "OPTS DONE=$OPTS_DONE"
write_debug "PROMPT TEXT=$PROMPT_TEXT"
write_debug "VERBOSE=$VERBOSE"
write_debug "YESNO=$YESNO"

[ -n "$FONT" ] && STYLE="-fn '$FONT'"
if [ $CRITICAL -gt 0 ]; then
    STYLE="$STYLE -nf '$CRITFG' -nb '$CRITBG' -sf '$CRITSFG' -sb '$CRITSBG'"
else
    STYLE="$STYLE -nf '$STDFG' -nb '$STDBG' -sf '$STDSFG' -sb '$STDSBG'"
fi

if [ -z "$PROMPT_TEXT" ] ; then
    #normal dmenu_run call
    # -i is insensitive search. no long form arguments in older versions
    eval "$LAUNCHER -i $STYLE"
    exit 0
fi

if [ $YESNO -gt 0 ] ; then
    CHOICES=("No" "Yes")
fi

if [ ${#CHOICES[@]} -lt 1 ]; then
    EMSG="ERROR! Expected list of choices, but given none."
    echo "$EMSG"
    notify-send --urgency critical --expire-time 3000 "$APP_NAME" "$EMSG"
    usage
fi

write_debug "CHOICES=${CHOICES[@]}"

RES=$(join_by $'\n' "${CHOICES[@]}" | eval "$PROMPTER -i $STYLE -p '$PROMPT_TEXT'")
write_debug "Selection=$RES"

write_debug "COMMAND=$@"
[ $YESNO -gt 0 ] && [[ "$RES" == "Yes" ]] && "$@"
[ $YESNO -eq 0 ] && "$@" "$RES"


#!/bin/bash
#
# This script will ssh connect to the provided host using the provided account,
# or the name specified by $USER, and run commands to retrieve system state 
# information such as
#   - The amount of RAM being used
#   - The amount of Disk space being used
#   - CPU utilization

print_usage(){
    echo "usage: $0 [-u REMOTE_ACCOUNT_NAME] HOSTS..."
}

ACCOUNT=$USER

while getopts ":u:" args; do
    case "${args}" in
        u)
            ACCOUNT=${OPTARG}
            ;;
    esac
done
# If we got an option, shift past it
shift $((OPTIND-1))

HOSTS=(${@})

echo "Using remote account name $ACCOUNT."
for h in "${HOSTS[@]}"
do
    echo "Added host $h to queue."
done

if [ -z "$HOSTS" ] ; then
    print_usage
    echo "error: missing host argument!"
    exit 1
fi

# Quoting EOF at the start prevents variable substitution before the command
# is passed to the remote. Without it, all the uname and lsb_release calls
# would be substituted with the local machine information.
for h in "${HOSTS[@]}"
do
    echo "Sending request to $h..."
    ssh "$ACCOUNT"@$h /bin/bash << 'EOF'
        printf "@%s: %s - %s (%s %s %s)\n" "$(uname -n)" "$(lsb_release -sd)" \
             "$(lsb_release -sc)" "$(uname -o)" "$(uname -r)" "$(uname -m)"
        uptime;
        free -h;
        df -hT -x tmpfs -x devtmpfs -x squashfs;
        mpstat 2 3 | perl -ne '/((^Average)|(.+CPU.+%)).+/ && print';
        if which libvirtd > /dev/null ; then
            if systemctl status libvirtd | grep -q "active (running)" ; then
                virsh -c qemu:///system list --all
            fi
        fi
EOF
done

exit $?


